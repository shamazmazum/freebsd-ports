--- CMakeModules/Dependencies.cmake.orig	2024-09-08 17:40:21 UTC
+++ CMakeModules/Dependencies.cmake
@@ -99,6 +99,15 @@ macro(resolve_dependencies) # Intentionally a macro - 
         # Prebuilt & user-supplied deps are resolved using the same code here.
         find_package(ZLIB REQUIRED)
         find_package(FFmpeg REQUIRED)
+        find_package(PkgConfig REQUIRED)
+        find_package(GLM REQUIRED)
+        find_package(FastFloat CONFIG REQUIRED)
+        find_package(CLI11 CONFIG REQUIRED)
+        pkg_check_modules(LuaJit REQUIRED luajit)
+        pkg_check_modules(NLOHMANN_JSON REQUIRED nlohmann_json)
+        pkg_check_modules(SOL2 REQUIRED sol2)
+        pkg_check_modules(FMT REQUIRED fmt)
+        pkg_check_modules(SPDLOG REQUIRED spdlog)
 
         find_package(SDL2 CONFIG REQUIRED)
         add_library(SDL2OE INTERFACE)
--- CMakeModules/FindGLM.cmake.orig	2024-10-06 18:49:53 UTC
+++ CMakeModules/FindGLM.cmake
@@ -0,0 +1,62 @@
+# FindGLM - attempts to locate the glm matrix/vector library.
+#
+# This module defines the following variables (on success):
+#   GLM_INCLUDE_DIRS  - where to find glm/glm.hpp
+#   GLM_FOUND         - if the library was successfully located
+#
+# It is trying a few standard installation locations, but can be customized
+# with the following variables:
+#   GLM_ROOT_DIR      - root directory of a glm installation
+#                       Headers are expected to be found in either:
+#                       <GLM_ROOT_DIR>/glm/glm.hpp           OR
+#                       <GLM_ROOT_DIR>/include/glm/glm.hpp
+#                       This variable can either be a cmake or environment
+#                       variable. Note however that changing the value
+#                       of the environment varible will NOT result in
+#                       re-running the header search and therefore NOT
+#                       adjust the variables set by this module.
+
+#=============================================================================
+# Copyright 2012 Carsten Neumann
+#
+# Distributed under the OSI-approved BSD License (the "License");
+# see accompanying file Copyright.txt for details.
+#
+# This software is distributed WITHOUT ANY WARRANTY; without even the
+# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
+# See the License for more information.
+#=============================================================================
+# (To distribute this file outside of CMake, substitute the full
+#  License text for the above reference.)
+
+# default search dirs
+SET(_glm_HEADER_SEARCH_DIRS
+  "/usr/include"
+  "/usr/local/include")
+
+# check environment variable
+SET(_glm_ENV_ROOT_DIR "$ENV{GLM_ROOT_DIR}")
+
+IF(NOT GLM_ROOT_DIR AND _glm_ENV_ROOT_DIR)
+  SET(GLM_ROOT_DIR "${_glm_ENV_ROOT_DIR}")
+ENDIF(NOT GLM_ROOT_DIR AND _glm_ENV_ROOT_DIR)
+
+# put user specified location at beginning of search
+IF(GLM_ROOT_DIR)
+  SET(_glm_HEADER_SEARCH_DIRS "${GLM_ROOT_DIR}"
+    "${GLM_ROOT_DIR}/include"
+    ${_glm_HEADER_SEARCH_DIRS})
+ENDIF(GLM_ROOT_DIR)
+
+# locate header
+FIND_PATH(GLM_INCLUDE_DIR "glm/glm.hpp"
+  PATHS ${_glm_HEADER_SEARCH_DIRS})
+
+INCLUDE(FindPackageHandleStandardArgs)
+FIND_PACKAGE_HANDLE_STANDARD_ARGS(GLM DEFAULT_MSG
+  GLM_INCLUDE_DIR)
+
+IF(GLM_FOUND)
+  SET(GLM_INCLUDE_DIRS "${GLM_INCLUDE_DIR}")
+  MESSAGE(STATUS "GLM_INCLUDE_DIR = ${GLM_INCLUDE_DIR}")
+ENDIF(GLM_FOUND)
--- src/Application/Startup/CMakeLists.txt.orig	2024-09-08 17:40:21 UTC
+++ src/Application/Startup/CMakeLists.txt
@@ -31,3 +31,7 @@ target_link_libraries(application_startup
         scripting
         utility)
 
+target_include_directories(application_startup PRIVATE
+  ${LuaJit_INCLUDE_DIRS}
+  ${SOL2_INCLUDE_DIRS}
+)
--- src/Bin/CodeGen/CodeGen.cpp.orig	2024-09-08 17:40:21 UTC
+++ src/Bin/CodeGen/CodeGen.cpp
@@ -186,7 +186,7 @@ int runBeaconsCodeGen(const CodeGenOptions &options, G
         if (!fileName.ends_with(".odm") && !fileName.ends_with(".blv"))
             continue; // Not a level file.
 
-        fmt::println("    {{MAP_{}, {}}},", mapIdEnumName(mapInfoByFileName(mapStats, fileName)), i);
+        fmt::print("    {{MAP_{}, {}}},\n", mapIdEnumName(mapInfoByFileName(mapStats, fileName)), i);
     }
 
     return 0;
--- src/Bin/CodeGen/CodeGenFunctions.h.orig	2024-09-08 17:40:21 UTC
+++ src/Bin/CodeGen/CodeGenFunctions.h
@@ -40,6 +40,6 @@ void dumpAligned(FILE *file, std::string_view prefix, 
         }
         while (output.ends_with(' ')) // Note that we don't trim front.
             output.pop_back();
-        fmt::println(file, "{}", output);
+        fmt::print(file, "{}\n", output);
     }
 }
--- src/Bin/LodTool/LodTool.cpp.orig	2024-09-08 17:40:21 UTC
+++ src/Bin/LodTool/LodTool.cpp
@@ -21,10 +21,10 @@ int runDump(const LodToolOptions &options) {
 int runDump(const LodToolOptions &options) {
     LodReader reader(options.lodPath, LOD_ALLOW_DUPLICATES);
 
-    fmt::println("Lod file: {}", options.lodPath);
-    fmt::println("Version: {}", toString(reader.info().version));
-    fmt::println("Description: {}", reader.info().description);
-    fmt::println("Root folder: {}", reader.info().rootName);
+    fmt::print("Lod file: {}\n", options.lodPath);
+    fmt::print("Version: {}\n", toString(reader.info().version));
+    fmt::print("Description: {}\n", reader.info().description);
+    fmt::print("Root folder: {}\n", reader.info().rootName);
 
     for (const std::string &name : reader.ls()) {
         Blob data = reader.read(name);
@@ -33,17 +33,17 @@ int runDump(const LodToolOptions &options) {
         if (isCompressed)
             data = lod::decodeCompressed(data);
 
-        fmt::println("");
-        fmt::println("Entry: {}", name);
-        fmt::println("Format: {}", toString(lod::magic(data, name)));
-        fmt::println("Size{}: {}", isCompressed ? " (uncompressed)" : "", data.size());
-        fmt::println("Data{}:", isCompressed ? " (uncompressed)" : "");
+        fmt::print("\n");
+        fmt::print("Entry: {}\n", name);
+        fmt::print("Format: {}\n", toString(lod::magic(data, name)));
+        fmt::print("Size{}: {}\n", isCompressed ? " (uncompressed)" : "", data.size());
+        fmt::print("Data{}\n:", isCompressed ? " (uncompressed)" : "");
 
         std::string line;
         for (size_t offset = 0; offset < data.size(); offset += 16) {
             std::string_view chunk = data.string_view().substr(offset, 16);
 
-            fmt::println("    {:08X}: {: <40}  {}", offset, toHexDump(chunk), ascii::toPrintable(chunk, '.'));
+            fmt::print("    {:08X}: {: <40}  {}\n", offset, toHexDump(chunk), ascii::toPrintable(chunk, '.'));
         }
     }
 
--- src/Engine/Graphics/CMakeLists.txt.orig	2024-09-08 17:40:21 UTC
+++ src/Engine/Graphics/CMakeLists.txt
@@ -65,16 +65,22 @@ target_link_libraries(engine_graphics
 target_check_style(engine_graphics)
 
 target_link_libraries(engine_graphics
-        PUBLIC
-        engine
-        engine_graphics_renderer
-        utility
-        library_serialization
-        library_color
-        library_image
-        glm::glm
-        OpenGL::GL
-        libluajit
-        sol2
-        PRIVATE
-        glad)
+  PUBLIC
+  engine
+  engine_graphics_renderer
+  utility
+  library_serialization
+  library_color
+  library_image
+  OpenGL::GL
+  ${LuaJit_LDFLAGS}
+  ${SOL2_LDFLAGS}
+  PRIVATE
+  glad
+)
+
+target_include_directories(engine_graphics PRIVATE
+  ${LuaJit_INCLUDE_DIRS}
+  ${SOL2_INCLUDE_DIRS}
+  ${GLM_INCLUDE_DIR}
+)
--- src/Engine/Graphics/Level/CMakeLists.txt.orig	2024-09-08 17:40:21 UTC
+++ src/Engine/Graphics/Level/CMakeLists.txt
@@ -10,17 +10,22 @@ target_link_libraries(engine_graphics_level
 target_check_style(engine_graphics_level)
 
 target_link_libraries(engine_graphics_level
-        PUBLIC
-        engine
-        engine_graphics
-        engine_graphics_renderer
-        utility
-        library_serialization
-        library_color
-        library_image
-        glm::glm
-        OpenGL::GL
-        engine_graphics
-        PRIVATE
-        libluajit
-        glad)
+  PUBLIC
+  engine
+  engine_graphics
+  engine_graphics_renderer
+  utility
+  library_serialization
+  library_color
+  library_image
+  OpenGL::GL
+  engine_graphics
+  PRIVATE
+  ${LuaJit_LDFLAGS}
+  glad
+)
+
+target_include_directories(engine_graphics_level PRIVATE
+  ${LuaJit_INCLUDE_DIRS}
+  ${GLM_INCLUDE_DIR}
+)
--- src/Engine/Graphics/Renderer/CMakeLists.txt.orig	2024-09-08 17:40:21 UTC
+++ src/Engine/Graphics/Renderer/CMakeLists.txt
@@ -25,15 +25,19 @@ target_link_libraries(engine_graphics_renderer
 target_check_style(engine_graphics_renderer)
 
 target_link_libraries(engine_graphics_renderer
-        PUBLIC
-        engine
-        engine_graphics
-        utility
-        library_serialization
-        library_color
-        library_image
-        glm::glm
-        OpenGL::GL
-        engine_graphics
-        PRIVATE
-        glad)
+  PUBLIC
+  engine
+  engine_graphics
+  utility
+  library_serialization
+  library_color
+  library_image
+  OpenGL::GL
+  engine_graphics
+  PRIVATE
+  glad
+)
+
+target_include_directories(engine_graphics_renderer PRIVATE
+  ${GLM_INCLUDE_DIR}
+)
--- src/GUI/Overlay/CMakeLists.txt.orig	2024-09-08 17:40:21 UTC
+++ src/GUI/Overlay/CMakeLists.txt
@@ -24,3 +24,8 @@ target_link_libraries(gui_overlay
     imgui
     scripting
 )
+
+target_include_directories(gui_overlay PRIVATE
+  ${LuaJit_INCLUDE_DIRS}
+  ${SOL2_INCLUDE_DIRS}
+)
--- src/Library/Json/CMakeLists.txt.orig	2024-09-08 17:40:21 UTC
+++ src/Library/Json/CMakeLists.txt
@@ -11,19 +11,26 @@ target_link_libraries(library_json
 add_library(library_json STATIC ${LIBRARY_JSON_SOURCES} ${LIBRARY_JSON_HEADERS})
 target_check_style(library_json)
 target_link_libraries(library_json
-        PUBLIC
-        utility
-        library_serialization
-        nlohmann_json)
+  PUBLIC
+  utility
+  library_serialization
+)
 
+target_include_directories(library_json PRIVATE
+  ${NLOHMANN_JSON_INCLUDE_DIRS}
+)
 
 if(OE_BUILD_TESTS)
-    set(TEST_LIBARY_JSON_SOURCES Tests/Json_ut.cpp)
+  set(TEST_LIBARY_JSON_SOURCES Tests/Json_ut.cpp)
 
-    add_library(test_library_json OBJECT ${TEST_LIBARY_JSON_SOURCES})
-    target_link_libraries(test_library_json PUBLIC testing_unit library_json)
+  add_library(test_library_json OBJECT ${TEST_LIBARY_JSON_SOURCES})
+  target_link_libraries(test_library_json PUBLIC testing_unit library_json)
 
-    target_check_style(test_library_json)
+  target_check_style(test_library_json)
 
-    target_link_libraries(OpenEnroth_UnitTest PUBLIC test_library_json)
+  target_link_libraries(OpenEnroth_UnitTest PUBLIC test_library_json)
+
+  target_include_directories(test_library_json PRIVATE
+    ${NLOHMANN_JSON_INCLUDE_DIRS}
+  )
 endif()
--- src/Library/Logger/CMakeLists.txt.orig	2024-09-08 17:40:21 UTC
+++ src/Library/Logger/CMakeLists.txt
@@ -20,5 +20,14 @@ add_library(library_logger STATIC ${LIBRARY_LOGGER_SOU
         LogEnumFunctions.h)
 
 add_library(library_logger STATIC ${LIBRARY_LOGGER_SOURCES} ${LIBRARY_LOGGER_HEADERS})
-target_link_libraries(library_logger PUBLIC library_serialization utility PRIVATE spdlog::spdlog)
+target_link_libraries(library_logger
+  PUBLIC library_serialization utility
+  PRIVATE ${SPDLOG_LDFLAGS}
+)
+target_include_directories(library_logger PRIVATE ${SPDLOG_INCLUDE_DIRS})
+target_compile_definitions(library_logger PRIVATE
+  SPDLOG_FMT_EXTERNAL
+  SPDLOG_DISABLE_DEFAULT_LOGGER
+  SPDLOG_WCHAR_SUPPORT
+)
 target_check_style(library_logger)
--- src/Library/Logger/Logger.cpp.orig	2024-09-08 17:40:21 UTC
+++ src/Library/Logger/Logger.cpp
@@ -23,11 +23,8 @@ Logger::~Logger() {
     logger = nullptr;
 }
 
-void Logger::logV(const LogCategory &category, LogLevel level, fmt::string_view fmt, fmt::format_args args) {
-    std::string message = fmt::vformat(fmt, args);
-
-    auto guard = std::lock_guard(_mutex);
-    _sink->write(category, level, message);
+void Logger::writeToSink(const LogCategory &category, LogLevel level, std::string output) {
+    _sink->write(category, level, output);
 }
 
 LogLevel Logger::level() const {
--- src/Library/Logger/Logger.h.orig	2024-09-08 17:40:21 UTC
+++ src/Library/Logger/Logger.h
@@ -46,10 +46,15 @@ class Logger {
     template<class... Args>
     void log(const LogCategory &category, LogLevel level, fmt::format_string<Args...> fmt, Args &&... args) {
         if (shouldLog(category, level))
-            logV(category, level, fmt, fmt::make_format_args(args...));
+            logV(category, level, fmt, std::forward<Args>(args)...);
     }
 
     template<class... Args>
+    void logV(const LogCategory &category, LogLevel level, fmt::string_view fmt, Args&&... args) {
+        writeToSink(category, level, fmt::format(fmt::runtime(fmt), args...));
+    }
+
+    template<class... Args>
     void trace(const LogCategory &category, fmt::format_string<Args...> fmt, Args &&... args) {
         log(category, LOG_TRACE, fmt, std::forward<Args>(args)...);
     }
@@ -134,7 +139,7 @@ class Logger {
     void setSink(LogSink *sink);
 
  private:
-    void logV(const LogCategory &category, LogLevel level, fmt::string_view fmt, fmt::format_args args);
+    void writeToSink(const LogCategory &category, LogLevel level, std::string output);
 
  private:
     std::mutex _mutex;
--- src/Library/Trace/CMakeLists.txt.orig	2024-09-08 17:40:21 UTC
+++ src/Library/Trace/CMakeLists.txt
@@ -9,9 +9,15 @@ target_check_style(library_trace)
 
 add_library(library_trace STATIC ${LIBRARY_TRACE_SOURCES} ${LIBRARY_TRACE_HEADERS})
 target_check_style(library_trace)
-target_link_libraries(library_trace PUBLIC
-        library_serialization
-        library_json
-        library_platform_interface
-        library_config
-        library_geometry)
+target_link_libraries(
+  library_trace PUBLIC
+  library_serialization
+  library_json
+  library_platform_interface
+  library_config
+  library_geometry
+)
+
+target_include_directories(library_trace PRIVATE
+  ${NLOHMANN_JSON_INCLUDE_DIRS}
+)
--- src/Scripting/CMakeLists.txt.orig	2024-09-08 17:40:21 UTC
+++ src/Scripting/CMakeLists.txt
@@ -33,10 +33,16 @@ target_link_libraries(scripting
 target_check_style(scripting)
 
 target_link_libraries(scripting
-        PUBLIC
-        engine
-        library_logger
-        PRIVATE
-        libluajit
-        sol2
-        gui_overlay)
+  PUBLIC
+  engine
+  library_logger
+  PRIVATE
+  ${LuaJit_LDFLAGS}
+  ${SOL2_LDFLAGS}
+  gui_overlay
+)
+
+target_include_directories(scripting PRIVATE
+  ${LuaJit_INCLUDE_DIRS}
+  ${SOL2_INCLUDE_DIRS}
+)
--- src/Scripting/ImGuiBindings.cpp.orig	2024-09-08 17:40:21 UTC
+++ src/Scripting/ImGuiBindings.cpp
@@ -86,7 +86,8 @@ struct ImGuiInputTextUserData {
             break;
         }
 
-        *string = callback->call(data->EventFlag, step);
+        const std::string tmp = callback->call(data->EventFlag, step);
+        *string = tmp;
         data->DeleteChars(0, data->BufTextLen);
         data->InsertChars(0, string->data());
     }
--- src/Utility/CMakeLists.txt.orig	2024-09-08 17:40:21 UTC
+++ src/Utility/CMakeLists.txt
@@ -56,11 +56,14 @@ target_link_libraries(utility
 add_library(utility STATIC ${UTILITY_SOURCES} ${UTILITY_HEADERS})
 target_check_style(utility)
 target_link_libraries(utility
-        PUBLIC
-        fmt::fmt
-        gch::small_vector
-        PRIVATE
-        mio::mio)
+  PUBLIC
+  gch::small_vector
+  ${FMT_LDFLAGS}
+  PRIVATE
+  mio::mio
+)
+
+target_include_directories(utility PUBLIC ${FMT_INCLUDE_DIRS})
 
 if(OE_BUILD_TESTS)
     set(TEST_UTILITY_SOURCES
--- src/Utility/String/Format.h.orig	2024-09-08 17:40:21 UTC
+++ src/Utility/String/Format.h
@@ -1,7 +1,21 @@
 #pragma once
 
+#define FMT_USE_NONTYPE_TEMPLATE_ARGS true
 #include <fmt/printf.h>
 #include <fmt/format.h>
 #include <fmt/compile.h>
+
+// https://stackoverflow.com/questions/76932476/how-to-write-format-as-for-enums-of-external-namespaces-in-fmt-10-0/77007114#77007114
+template <typename EnumType>
+requires std::is_enum_v<EnumType>
+struct fmt::formatter<EnumType> : fmt::formatter<std::underlying_type_t<EnumType>>
+{
+    // Forwards the formatting by casting the enum to it's underlying type
+    auto format(const EnumType& enumValue, format_context& ctx) const
+    {
+        return fmt::formatter<std::underlying_type_t<EnumType>>::format(
+            static_cast<std::underlying_type_t<EnumType>>(enumValue), ctx);
+    }
+};
 
 using namespace fmt::literals; // NOLINT
--- thirdparty/CMakeLists.txt.orig	2024-09-08 17:40:21 UTC
+++ thirdparty/CMakeLists.txt
@@ -7,31 +7,14 @@ add_subdirectory(cmrc)
 set(CMAKE_POLICY_DEFAULT_CMP0077 NEW)
 
 add_subdirectory(cmrc)
-add_subdirectory(fast_float)
-add_subdirectory(glm)
 add_subdirectory(magic_enum)
-add_subdirectory(cli11)
-add_subdirectory(nlohmann_json)
 add_subdirectory(mio)
-add_subdirectory(sol2)
 add_subdirectory(imgui)
 
-# fmt
-add_subdirectory(fmt)
-target_compile_definitions(fmt INTERFACE FMT_USE_NONTYPE_TEMPLATE_ARGS) # Enable _cf literals.
-if(OE_BUILD_COMPILER STREQUAL "msvc")
-    target_compile_definitions(fmt INTERFACE FMT_CONSTEVAL=) # MSVC chokes on fmt consteval formatting, so we define FMT_CONSTEVAL=<empty>.
-endif()
-
 # glad
 add_subdirectory(glad)
 target_include_directories(glad INTERFACE ${CMAKE_CURRENT_SOURCE_DIR}/glad/include)
 
-# luajit
-add_subdirectory(luajit)
-target_include_directories(libluajit INTERFACE ${CMAKE_CURRENT_SOURCE_DIR}/luajit/luajit/src)
-set_target_properties(libluajit PROPERTIES COMPILE_FLAGS "${CMAKE_C_FLAGS}" LINK_FLAGS "${CMAKE_MODULE_LINKER_FLAGS}") # Make it compile under x86.
-
 # inifile_cpp, would rather not use add_subdirectory
 add_library(inicpp INTERFACE ${CMAKE_CURRENT_SOURCE_DIR}/inifile_cpp/include/inicpp.h)
 target_include_directories(inicpp INTERFACE ${CMAKE_CURRENT_SOURCE_DIR}/inifile_cpp/include)
@@ -39,12 +22,6 @@ add_subdirectory(small_vector)
 
 # small_vector
 add_subdirectory(small_vector)
-
-# spdlog
-set(SPDLOG_FMT_EXTERNAL ON)
-set(SPDLOG_DISABLE_DEFAULT_LOGGER ON)
-set(SPDLOG_WCHAR_SUPPORT ON) # Use unicode APIs on Windows.
-add_subdirectory(spdlog)
 
 # googletest
 if(OE_BUILD_TESTS)
