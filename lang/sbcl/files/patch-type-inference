--- src/compiler/ir1opt.lisp.orig	2024-12-29 10:12:03 UTC
+++ src/compiler/ir1opt.lisp
@@ -3068,10 +3068,7 @@
                      (link-blocks (node-block use) next-block)
                      ;; At least one use is good, downgrade any possible
                      ;; type conflicts to style warnings.
-                     (setf (cast-silent-conflict cast)
-                           (if (cast-mismatch-from-inlined-p cast use)
-                               t
-                               :style-warning))
+                     (setf (cast-silent-conflict cast) :style-warning)
                      (when (and (return-p dest)
                                 (basic-combination-p use)
                                 (eq (basic-combination-kind use) :local))
--- src/compiler/ir1report.lisp.orig	2024-12-29 10:12:03 UTC
+++ src/compiler/ir1report.lisp
@@ -84,20 +84,13 @@
                  (let ((pos (position 'transformed x :from-end t)))
                    (if pos
                        (subseq x (1+ pos))
-                       x)))
-               (hide-inlines (x)
-                 (loop for elt = (pop x)
-                       while x
-                       if (eq elt 'inlined)
-                       do (pop x)
-                       else
-                       collect elt)))
+                       x))))
           (let* ((forms (source-path-forms path))
                  (n 0)
                  (forms (if (member (first forms) args)
                             (rest forms)
                             forms))
-                 (forms (hide-inlines (no-transforms forms))))
+                 (forms (no-transforms forms)))
             (dolist (src forms)
               (if (>= n *enclosing-source-cutoff*)
                   (short (stringify-form (if (consp src)
--- src/compiler/ir1util.lisp.orig	2024-12-29 10:12:03 UTC
+++ src/compiler/ir1util.lisp
@@ -3566,18 +3566,6 @@ is :ANY, the function name is not checked."
                   (eq pkg *cl-package*))))
            (t t)))))
 
-(defun cast-mismatch-from-inlined-p (cast node)
-  (let* ((path (node-source-path node))
-         (transformed (memq 'transformed path))
-         (inlined))
-    (cond ((and transformed
-                (not (eq (memq 'transformed (node-source-path cast))
-                         transformed))))
-          ((setf inlined
-                 (memq 'inlined path))
-           (not (eq (memq 'inlined (node-source-path cast))
-                    inlined))))))
-
 (defun source-path-before-transforms (node)
   (let* ((path (node-source-path node))
          (first (position-if (lambda (x) (memq x '(transformed inlined)))
--- src/compiler/seqtran.lisp.orig	2024-12-29 10:12:03 UTC
+++ src/compiler/seqtran.lisp
@@ -1684,11 +1684,11 @@
 
 (defoptimizer (%concatenate-to-vector ir2-hook) ((widetag &rest args) node)
   (when (constant-lvar-p widetag)
-    (check-concatenate (sb-vm:saetp-ctype
-                        (find (lvar-value widetag)
-                              sb-vm:*specialized-array-element-type-properties*
-                              :key #'sb-vm:saetp-typecode))
-                       args node)))
+    (let ((type-properties (find (lvar-value widetag)
+                                 sb-vm:*specialized-array-element-type-properties*
+                                 :key #'sb-vm:saetp-typecode)))
+      (when type-properties
+        (check-concatenate (sb-vm:saetp-ctype type-properties) args node)))))
 
 (defoptimizer (merge ir2-hook) ((type sequence1 sequence2 predicate &key &allow-other-keys) node)
   (when (constant-lvar-p type)
--- tests/compiler-2.pure.lisp.orig	2024-12-29 10:12:03 UTC
+++ tests/compiler-2.pure.lisp
@@ -3266,18 +3266,6 @@
       (inline-deletion-note x t))
    ((t) 10)))
 
-(with-test (:name :inline-type-mismatch)
-  (checked-compile-and-assert
-      (:allow-notes nil)
-      `(lambda (x y)
-         (car (inline-deletion-note x y)))
-    (('(a) nil) 'a))
-  (checked-compile-and-assert
-      ()
-      `(lambda (x y)
-         (1+ (position x (the list y))))
-    ((1 '(1)) 1)))
-
 (with-test (:name :lvar-annotation-inline-type-mismatch)
   (checked-compile-and-assert
       ()
