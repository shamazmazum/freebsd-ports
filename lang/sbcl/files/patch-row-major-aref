commit cfebeece260cf417c0a107eb6e8f8486e13fea2a
Author: Vasily Postnicov <shamaz.mazum@gmail.com>
Date:   Fri Aug 22 23:07:23 2025 +0300

    Eliminate runtime array bounds checks.
    
    When it is known statically that an index is always in bounds,
    runtime checks can be elided.
    
    Currently this supports only an access via ROW-MAJOR-AREF

diff --git src/compiler/constraint.lisp src/compiler/constraint.lisp
index b7be99a9b..74a68362b 100644
--- src/compiler/constraint.lisp
+++ src/compiler/constraint.lisp
@@ -56,6 +56,8 @@
 (defvar *constraint-blocks*)
 (defvar *constraint-blocks-p*)
 
+;; The name is a bit misleading. These constraints can be used also
+;; for multidimensional arrays accessed with a row-major index.
 (defstruct (vector-length-constraint
             (:constructor make-vector-length-constraint (var))
             (:copier nil))
diff --git src/compiler/equality-constraints.lisp src/compiler/equality-constraints.lisp
index 046d53867..9406d46bd 100644
--- src/compiler/equality-constraints.lisp
+++ src/compiler/equality-constraints.lisp
@@ -106,7 +106,12 @@
          (array-lvar
            (and (combination-p use)
                 (lvar-fun-is (combination-fun use)
-                             '(vector-length length))
+                             '(vector-length length
+                               ;; vector-length-constraint can also be
+                               ;; used for multidimensional arrays in
+                               ;; some cases, like accessing via
+                               ;; ROW-MAJOR-AREF.
+                               %array-available-elements))
                 (car (combination-args use))))
          (array-var (and array-lvar
                          (or (not simple)
@@ -626,7 +631,7 @@
 (defoptimizer (%check-bound equality-constraint) ((array dimension index) node gen)
   (let ((array-var (ok-lvar-lambda-var array gen)))
     (when (and array-var
-               (csubtypep (lvar-type array) (specifier-type '(simple-array * (*))))
+               (csubtypep (lvar-type array) (specifier-type '(simple-array *)))
                (block nil
                  (map-equality-constraints (make-vector-length-constraint array-var) index gen
                                            (lambda (op not-p)
diff --git tests/constraint.pure.lisp tests/constraint.pure.lisp
index f8fae56b6..9bd0bb1a9 100644
--- tests/constraint.pure.lisp
+++ tests/constraint.pure.lisp
@@ -1767,6 +1767,24 @@
                      nil))
              0)))
 
+(with-test (:name :loop-row-major-aref-check-bound)
+  (assert (= (count 'sb-kernel:%check-bound
+                    (ctu:ir1-named-calls
+                     `(lambda (x)
+                        (declare (type (simple-array t (* *)) x))
+                        (loop for i below (array-total-size x)
+                              do (print (row-major-aref x i))))
+                     nil))
+             0))
+  (assert (= (count 'sb-kernel:%check-bound
+                    (ctu:ir1-named-calls
+                     `(lambda (x)
+                        (declare (type (simple-array t (* *)) x))
+                        (loop for i below (array-total-size x)
+                              do (print (row-major-aref x (1+ i)))))
+                     nil))
+             1)))
+
 (with-test (:name :concatenate-length)
   (assert-type
    (lambda (x y)
