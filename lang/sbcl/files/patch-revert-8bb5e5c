commit a3c1bf43e42cae916412db70625230c5e69ac768
Author: Vasily Postnicov <shamaz.mazum@gmail.com>
Date:   Mon Apr 14 10:25:47 2025 +0300

    Revert 8bb5e5c

diff --git src/compiler/checkgen.lisp src/compiler/checkgen.lisp
index cbf6c2141..a268f36ae 100644
--- src/compiler/checkgen.lisp
+++ src/compiler/checkgen.lisp
@@ -489,28 +489,6 @@
                         (values-list args)))
                  (multiple-value-call #'values-type-check ,dummy)))))))))
 
-(defun cast-ignore-nil-use (use type)
-  (labels ((ref (use)
-             (and (ref-p use)
-                  (constant-p (ref-leaf use))
-                  (null (constant-value (ref-leaf use)))))
-           (refs (lvar)
-             (do-uses (use lvar t)
-               (unless (ref use)
-                 (return)))))
-    (or (ref use)
-        (and (exit-p use)
-             (refs (exit-value use)))
-        (and (combination-is use '(values))
-             (let ((new-type (make-values-type
-                              (loop for arg in (combination-args use)
-                                    for arg-type = (lvar-type arg)
-                                    collect (if (and (eq arg-type (specifier-type 'null))
-                                                     (refs arg))
-                                                *universal-type*
-                                                arg-type)))))
-               (values-types-equal-or-intersect new-type type))))))
-
 ;;; Check all possible arguments of CAST and emit type warnings for
 ;;; those with type errors. If the value of USE is being used for a
 ;;; variable binding, we figure out which one for source context. If
@@ -523,8 +501,7 @@
          (atype (cast-asserted-type cast))
          bad)
     (do-uses (use value)
-      (unless (or (values-types-equal-or-intersect (node-derived-type use) atype)
-                  (cast-ignore-nil-use use atype))
+      (unless (values-types-equal-or-intersect (node-derived-type use) atype)
         (push use bad)))
     (loop for use in bad
           for path = (source-path-before-transforms use)
diff --git src/compiler/ir1opt.lisp src/compiler/ir1opt.lisp
index 9baff3e6e..ceba64dce 100644
--- src/compiler/ir1opt.lisp
+++ src/compiler/ir1opt.lisp
@@ -3137,13 +3137,12 @@
                           (eq (cast-silent-conflict cast) :style-warning)
                           (block common
                             (do-uses (bad-use value)
-                              (unless (cast-ignore-nil-use bad-use atype)
-                                (do-uses (good-use lvar)
-                                  (unless (eq good-use cast)
-                                    (let ((common (common-inline-point bad-use good-use)))
-                                      (unless (and common
-                                                   (cast-mismatch-from-inlined-p cast common))
-                                        (push bad-use bad-uses)))))))
+                              (do-uses (good-use lvar)
+                                (unless (eq good-use cast)
+                                  (let ((common (common-inline-point bad-use good-use)))
+                                    (unless (and common
+                                                 (cast-mismatch-from-inlined-p cast common))
+                                      (push bad-use bad-uses))))))
                             t))
                  (cond (bad-uses
                         (setf detail (lvar-uses-all-sources bad-uses)
diff --git tests/bad-code.pure.lisp tests/bad-code.pure.lisp
index 94a6ae387..e80bb417a 100644
--- tests/bad-code.pure.lisp
+++ tests/bad-code.pure.lisp
@@ -397,41 +397,6 @@
                         (aref x 100))
                       :allow-warnings t))))
 
-(with-test (:name :uses-with-bad-types)
-  (assert (nth-value 3
-                     (checked-compile
-                      '(lambda (x)
-                        (the integer (if x 10 t)))
-                      :allow-style-warnings t)))
-  (assert (nth-value 3
-                     (checked-compile
-                      '(lambda (c)
-                        (the integer
-                         (if c (map nil #'1+ c) 1)))
-                      :allow-style-warnings t)))
-  (checked-compile
-   '(lambda (x)
-     (the integer (if x 10))))
-  (checked-compile
-   '(lambda (c m)
-     (char-code (block nil (labels ((j (c)
-                                      (if c
-                                          #\c
-                                          (return nil))))
-                             (j c)
-                             (j m))))))
-  (checked-compile
-   '(lambda (c)
-     (the integer
-      (or (position c "AB") (position c "CD")))))
-  (checked-compile
-   '(lambda (x)
-     (multiple-value-bind (a b) (if x
-                                    (values nil 2)
-                                    (values 2 3))
-       (declare (integer a))
-       (list a b)))))
-
 (with-test (:name :constant-modification-local-function)
   (assert (= (length (nth-value 2
                                 (checked-compile
